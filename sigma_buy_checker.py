#!/usr/bin/env python3
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

import os, sys, datetime as dt
<<<<<<< HEAD
import yfinance as yf, requests, smtplib
=======
import yfinance as yf
import requests, smtplib
>>>>>>> feature/sigma-multi
from email.mime.text import MIMEText
from email.utils import formataddr

def send_telegram(msg):
    payload = {
        "chat_id": os.environ['TELEGRAM_CHAT_ID'],
        "text":    msg,
        "parse_mode": "Markdown"
    }
    requests.post(f"https://api.telegram.org/bot{os.environ['TELEGRAM_TOKEN']}/sendMessage", json=payload)

def send_email(subject, body):
    user = os.environ['EMAIL_USER']
    pwd  = os.environ['EMAIL_PASS']
    to   = os.environ['EMAIL_TO']
    html = f"<pre>{body}</pre>"
    msg  = MIMEText(html, _subtype='html', _charset='utf-8')
    msg['Subject'], msg['From'], msg['To'] = subject, formataddr(("Sigma Alert", user)), to
    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as s:
        s.login(user, pwd)
        s.sendmail(user, [to], msg.as_string())

def main():
    # 1) ÎÇ†Ïßú Ïù∏Ïûê Ï≤òÎ¶¨ (YY/MM/DD), ÏóÜÏúºÎ©¥ Ïò§Îäò
    if len(sys.argv) > 1:
        try:
            base_date = dt.datetime.strptime(sys.argv[1], "%y/%m/%d").date()
        except ValueError:
<<<<<<< HEAD
            print("ÎÇ†Ïßú ÌòïÏãù Ïò§Î•ò: YY/MM/DD Î°ú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî.")
            sys.exit(1)
=======
            print("ÎÇ†Ïßú ÌòïÏãù Ïò§Î•ò: YY/MM/DD Î°ú ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî."); sys.exit(1)
>>>>>>> feature/sigma-multi
    else:
        base_date = dt.date.today()
    next_day = base_date + dt.timedelta(days=1)

<<<<<<< HEAD
    # 2) Ìã∞Ïª§ÏôÄ ÏúàÎèÑÏö∞ Î¶¨Ïä§Ìä∏
=======
    # Ìã∞Ïª§ & ÏúàÎèÑÏö∞
>>>>>>> feature/sigma-multi
    tickers = ["SOXL","TMF","SCHD","JEPI","JEPQ","QQQ","SPLG","NVDA"]
    windows = [10,20,60,90,120,252]

<<<<<<< HEAD
    # 3) Í≥ºÍ±∞ 260Í±∞ÎûòÏùºÏπò Ï¢ÖÍ∞Ä ÏãúÎ¶¨Ï¶à(Í∞Å Ìã∞Ïª§Î≥Ñ) Ìïú Î∞©Ïóê Î∞õÍ∏∞
    full = {
        t: yf.download(t, period="260d", progress=False)["Close"]
             .dropna()
        for t in tickers
    }

    # 4) Í≤∞Í≥º Î¨∏ÏûêÏó¥ ÎßåÎì§Í∏∞
    out_lines = [f"üìå Í∏∞Ï§ÄÏùº: {base_date}"]
    header = f"{'Ìã∞Ïª§':<6}{'Ï¢ÖÍ∞Ä':>8}{'1œÉ':>8}{'2œÉ':>8}{'œÉ(%)':>8}"
    out_lines.append("")        # Îπà Ï§Ñ
    out_lines.append(header)
    out_lines.append("-"*len(header))

    out_lines.append("")
    for t in tickers:
        ser   = full[t]
        price = float(ser.iloc[-1])
        # Í∞Å ÏúàÎèÑÏö∞ Î≥Ñ Í≥ÑÏÇ∞
        for w in windows:
            ret   = ser.pct_change().dropna().tail(w)
            sigma = float(ret.std() * 100)
            p1    = price * (1 - sigma/100)
            p2    = price * (1 - 2*sigma/100)
            out_lines.append(f"{t:<6}{price:8.2f}{p1:8.2f}{p2:8.2f}{sigma:8.2f}")
            # Ìã∞Ïª§ Ìïú Î≤àÎßå Ïì∞Í≥†, ÏúàÎèÑÏö∞Îäî /Î°ú Î∂ôÏó¨ Ïì∞Í≥† Ïã∂ÏúºÏãúÎ©¥ ÏïÑÎûòÏ≤òÎüº Î∞îÍøÄ ÏàòÎèÑ ÏûàÏäµÎãàÎã§.
            # windows_str = "/".join(map(str, windows))
            # out_lines.append(f"{windows_str:>6}{price:8.2f}{p1:8.2f}{p2:8.2f}{sigma:8.2f}")

    output = "\n".join(out_lines)

    # 5) Ï∂úÎ†• Î∞è Ï†ÑÏÜ°
=======
    # Í∏∞Ï§ÄÏùº Ï¢ÖÍ∞Ä
    if base_date == dt.date.today():
        df_price = yf.download(tickers, period="2d", progress=False)["Close"]
    else:
        df_price = yf.download(tickers, start=base_date.isoformat(), end=next_day.isoformat(), progress=False)["Close"]
    price_ser = df_price.iloc[-1]

    # Í≥ºÍ±∞ 1ÎÖÑÏπò Ï¢ÖÍ∞Ä
    start_1y = (base_date - dt.timedelta(days=365)).isoformat()
    full = {
        t: yf.download(t, start=start_1y, end=next_day.isoformat(), progress=False)["Close"].dropna()
        for t in tickers
    }

    # Ï∂úÎ†• Ï°∞Î¶Ω
    out = [f"üìå Í∏∞Ï§ÄÏùº: {base_date}"]
    for t in tickers:
        price = float(price_ser[t])
        out.append(f"\n{t:<6}{'Ï¢ÖÍ∞Ä':>8}{'1œÉ':>8}{'2œÉ':>8}{'œÉ(%)':>8}")
        for w in windows:
            ser   = full[t].pct_change().dropna().tail(w)
            sigma = float(ser.std() * 100)
            p1    = price * (1 - sigma/100)
            p2    = price * (1 - 2*sigma/100)
            out.append(f"{w:<6}{price:8.2f}{p1:8.2f}{p2:8.2f}{sigma:8.2f}")
    output = "\n".join(out)

    # Ï∂úÎ†•¬∑Ï†ÑÏÜ°
>>>>>>> feature/sigma-multi
    title = f"Sigma Signals ({base_date})"
    print(output)
    send_telegram(output)
    send_email(title, output)

if __name__ == "__main__":
    main()
